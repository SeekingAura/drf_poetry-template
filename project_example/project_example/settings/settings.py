# type: ignore[reportUnusedImport]
"""
Django settings for project_example project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import ast
import os
from pathlib import Path

import dj_database_url

from ..logger.cmd_formatter import CmdFormatter
from ..logger.log_levels import LogLevels
from .dirs import (  # noqa: F401; Import dirs make sure exist expected dirs
    BASE_DIR,
    EXPORT_RESULT_DIR,
    LOG_CELERY,
    LOG_CSV_DIR,
    LOG_DIR,
    LOG_SUPERVISOR,
    RUN_CELERY_DIR,
    RUN_DIR,
    RUN_SUPERVISOR_DIR,
    TEMP_DISK_DIR,
)

# Logger
LOG_LEVELS: set[str] = LogLevels.get_known_levels()

LOG_LEVEL_CONSOLE: str = os.getenv("LOG_LEVEL_CONSOLE", "INFO")
LOG_LEVEL_DB: str = os.getenv("LOG_LEVEL_DB", "INFO")
LOG_LEVEL_CSV_LOG_FILES = os.getenv("LOG_LEVEL_CSV_LOG_FILES", "CRITICAL")

# Sqlalchemy
LOG_LEVEL_SQLALCHEMY_MAPPER: str = os.getenv("LOG_LEVEL_SQLALCHEMY_MAPPER", "WARNING")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s",
            "style": "%",
        },
    }
    | {
        f"simple.{level_i.lower()}": {
            "format": (
                f"%(asctime)s {getattr(CmdFormatter, level_i.lower())()} %(name)-12s "
                f"%(levelname)-8s %(message)s {CmdFormatter.reset()}"
            ),
            "style": "%",
        }
        for level_i in LOG_LEVELS
    }
    | {
        "empty": {
            "format": "%(message)s",
            "style": "%",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    }
    # Only certain level
    | {
        f"{level_i.lower()}_level_only": {
            "()": "project_example.logger.filter_log_level_sep.FilterLogLevelSep",
            "filter_levels": [
                level_i,
            ],
        }
        for level_i in LOG_LEVELS
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "filters": [
                "require_debug_false",
            ],
        },
    }
    | {
        f"console.{level_i.lower()}_only": {
            "class": "logging.StreamHandler",
            "formatter": f"simple.{level_i.lower()}",
            "filters": [
                f"{level_i.lower()}_level_only",
                "require_debug_true",
            ],
            "level": level_i,
        }
        for level_i in LOG_LEVELS
    }
    | {
        # id,created_at,data_example
        "file.report_csv.example": {
            "class": "project_example.logger.handlers.RotatingFileCSV",
            "csv_vars": (
                "id",
                "created_at",
                "data_example",
            ),
            "formatter": "empty",
            "filename": Path(LOG_CSV_DIR, "example.csv"),
            "encoding": "utf8",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
        },
    },
    "loggers": {
        "": {
            "handlers": [f"console.{level_i.lower()}_only" for level_i in LOG_LEVELS] + ["console"],
            "level": LOG_LEVEL_CONSOLE,
            "propagate": False,
        },
        # External files
        "report_csv.example": {
            "handlers": [
                "file.report_csv.example",
            ],
            "level": LOG_LEVEL_CSV_LOG_FILES,
            "propagate": False,
        },
    },
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = os.getenv("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = ast.literal_eval(os.getenv("DEBUG", "True"))

ALLOWED_HOSTS: list[str] = ast.literal_eval(os.getenv("ALLOWED_HOSTS", "[]"))


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # DRF
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    # Celery
    "django_celery_results",
    "django_celery_beat",
    # Own Project apps
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "project_example",
    "DESCRIPTION": "",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

# django-cors-headers
CORS_ALLOW_ALL_ORIGINS = ast.literal_eval(os.getenv("CORS_ALLOW_ALL_ORIGINS", "False"))
CORS_ALLOWED_ORIGINS: list[str] = ast.literal_eval(os.getenv("CORS_ALLOWED_ORIGINS", "[]"))

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project_example.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project_example.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=os.getenv(
            "DB_DEFAULT_DJ",
            f"sqlite:///{Path(BASE_DIR, 'db.sqlite3').absolute().as_posix()}",
        ),
        conn_max_age=0,
        conn_health_checks=True,
    ),
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE: str = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery Configuration Options
# Usually same to TIME_ZONE of project, could be different
CELERY_TIMEZONE: str = TIME_ZONE
CELERY_TASK_TRACK_STARTED: bool = True
CELERY_TASK_TIME_LIMIT: int = 30 * 60

CELERY_RESULT_BACKEND: str = "django-db"

CELERY_BROKER_URL: str = os.getenv("CELERY_BROKER_URL", "")
