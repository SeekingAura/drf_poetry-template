[unix_http_server]
file=/tmp/supervisor.sock ; path to your socket file
chmod=7770

; set user and password for internal unix http server
; username=admin
; password=password

[supervisord]
logfile=%(ENV_APP_ROOT)s/logs/supervisor/supervisord.log ; supervisord log file
logfile_maxbytes=5MB ; maximum size of logfile before rotation
logfile_backups=10 ; number of backed up logfiles
loglevel=%(ENV_SUPERVISOR_LOG_LEVEL)s ; info, debug, warn, trace

childlogdir=%(ENV_APP_ROOT)s/logs/supervisor/ ; where child log files will live

pidfile=%(ENV_APP_ROOT)s/run/supervisor/supervisord.pid ; pidfile location

nodaemon=%(ENV_CONTAINER_MODE)s ; run supervisord as a daemon

minfds=1024 ; number of startup file descriptors
minprocs=200 ; number of process descriptors

user=%(ENV_USER_SUPERVISOR)s ; defaults to whichever user is runs supervisor


[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use unix:// schem for a unix sockets.

; set same user and password for generated unix_http_server above
; username=admin
; password=password

[eventlistener:exit_on_fatal]
process_name=supervisor_exit_on_fatal
events=PROCESS_STATE_FATAL
command=%(ENV_APP_ROOT)s/supervisor/scripts/kill.py

[include]
files=%(ENV_APP_ROOT)s/supervisor/back-conf.d/*.conf